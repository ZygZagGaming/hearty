plugins {
    id "java-library"
    id "idea"
    id "maven-publish"
    alias libs.plugins.ng.userdev
    alias libs.plugins.ng.mixin
    alias libs.plugins.minotaur
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

version = System.getenv("VERSION") ?: mod_version
group = mod_group_id

base {
    archivesName = "$mod_id-$minecraft_version-neoforge"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
//tasks.withType(JavaCompile).configureEach {
//    options.encoding = "UTF-8"
//    options.release.set(JavaLanguageVersion.of(17).asInt())
//}

repositories {
    //mavenLocal()
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url = "https://maven.shedaniel.me" }
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/zygzaggaming/hearty-api")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

//jarJar.enable()

minecraft {
//    modIdentifier = mod_id
//    mappings {
//        channel = official()
//        version.put "minecraft", minecraft_version
//    }

    accessTransformers.file "src/main/resources/META-INF/accesstransformer.cfg"
}

runs {
    configureEach {
        systemProperty "forge.logging.markers", "REGISTRIES"
        systemProperty "forge.logging.console.level", "debug"

//        dependencies {
//            runtime libs.api.get()
//        }

        modSource project.sourceSets.main
    }

    client {
        workingDirectory project.file("run/client/Dev")
    }

    client_1 {
        configure "client"
        workingDirectory project.file("run/client/Player1")
        programArguments.addAll "--username", "Player1"
    }

    client_2 {
        configure "client"
        workingDirectory project.file("run/client/Player2")
        programArguments.addAll "--username", "Player2"
    }

    server {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
        workingDirectory project.file("run/server")
        programArgument "--nogui"
    }

    data {
        programArguments.addAll "--mod", project.mod_id, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources/").getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
    implementation libs.neo
    implementation libs.api
    jarJar libs.api

    runtimeOnly libs.jei
}

//tasks.jar {
//    from sourceSets.main.output
//
//    duplicatesStrategy = DuplicatesStrategy.WARN
//    manifest {
//        attributes([
//                "Specification-Title"     : mod_id,
//                "Specification-Vendor"    : mod_authors,
//                "Specification-Version"   : "1",
//                "Implementation-Title"    : project.name,
//                "Implementation-Version"  : tasks.jar.archiveVersion,
//                "Implementation-Vendor"   : mod_authors,
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
//                "FMLModType": "MOD",
//                "Automatic-Module-Name": "hearty"
//        ])
//    }
//}

//java {
//    toolchain.languageVersion = JavaLanguageVersion.of(17)
//    withSourcesJar()
//}

//artifacts {
//    archives tasks.jar
//}

//tasks.named('jarJar') {
//
//}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        gpr(MavenPublication) {
            artifactId = "hearty-$minecraft_version-neoforge"

            artifact tasks.jarJar
//            artifact tasks.sourcesJar
//            artifact tasks.javadocJar

            version = System.getenv("VERSION") ?: mod_version

            pom {
                name = "hearty"
                description = "The Minecraft mod Hearty"
                url = "http://github.com/ZygZagGaming/hearty"

                licenses {
                    license {
                        name = "The MIT License"
                        url = "https://opensource.org/license/mit/"
                    }
                }

                developers {
                    developer {
                        id = "zygzaggaming"
                        name = "Alex Finn"
                        email = "zygzaggaming@gmail.com"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/ZygZagGaming/hearty.git"
                    developerConnection = "scm:git:ssh://github.com:ZygZagGaming/hearty.git"
                    url = "http://github.com/ZygZagGaming/"
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/zygzaggaming/hearty")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
//            url = file("repo")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

modrinth {
    token = project.findProperty("modrinth.token") ?: System.getenv("MODRINTH_TOKEN")
    projectId = "hearty"
    versionNumber = System.getenv("VERSION") ?: mod_version
    versionType = "release"
    uploadFile = jar
    gameVersions = ["1.21.1"]
    loaders = ["neoforge"]
    dependencies {
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
//        required.project "fabric-api" // Creates a new required dependency on Fabric API
//        optional.version "sodium", "mc1.19.3-0.4.8" // Creates a new optional dependency on this specific version of Sodium
    }

    syncBodyFrom = rootProject.file("README.md").text
}

//tasks.modrinth.dependsOn(tasks.modrinthSyncBody)